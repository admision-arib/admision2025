"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
import environ
import os
from decouple import config
from dj_database_url import parse as db_url
from decouple import Csv



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# SECURITY WARNING: don't run with debug turned on in production!
# Inicializar environ y cargar el archivo .env
#env = environ.Env(DEBUG=(bool, False))

# Leer el archivo .env
#environ.Env.read_env(os.path.join(BASE_DIR, '.env'))
#SECRET_KEY = env('SECRET_KEY')
#DEBUG = env.bool('DEBUG')
SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=False, cast=bool)
#ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])
ALLOWED_HOSTS = ["*"]


GOOGLE_DRIVE_STORAGE_JSON_KEY_FILE = os.getenv("GOOGLE_KEY_CONTENT")

with open('client_secrets.json', 'w') as f:
    f.write(GOOGLE_DRIVE_STORAGE_JSON_KEY_FILE)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #'tailwind',
    #'theme',
    'postulantes',
    #'django_browser_reload',
    'gdstorage'
]


DEFAULT_FILE_STORAGE = 'gdstorage.storage.GoogleDriveStorage'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #django-tailwind
    #"django_browser_reload.middleware.BrowserReloadMiddleware",
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['postulantes', 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}
# Base de datos
#DATABASES = {
#    'default': env.db(),
#}
DATABASES = {
    'default': config(
        'DATABASE_URL',
        default='sqlite:///' + os.path.join(BASE_DIR, 'db.sqlite3'),
        cast=db_url
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-pe'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#TAILWIND_APP_NAME = 'theme'

# Indica que se usará Google Drive como almacenamiento por defecto para archivos
#DEFAULT_FILE_STORAGE = 'gdstorage.storage.GoogleDriveStorage'
#DEFAULT_FILE_STORAGE = 'gdstorage.storage.GoogleDriveStorage'
# Ruta al archivo JSON de credenciales obtenido de Google Cloud Console.
# Este archivo debe contener la clave de la cuenta de servicio con permisos para acceder a la API de Google Drive.

# ID de la carpeta en Google Drive donde se subirán los archivos.
# Para obtener este ID, abre la carpeta en Google Drive y copia el valor de la URL.

# Configura la carpeta de Google Drive (puedes usar el ID de la carpeta)
#GDSTORAGE_ROOT = '1K1cGr6Us3nfAHi4U4km1g5DqH75PgINa'

# Ruta al archivo de credenciales JSON obtenido de Google Cloud Console
#GDSTORAGE_JSON_KEY_FILE = 'client_secrets.json'

#GOOGLE_DRIVE_STORAGE_JSON_KEY_FILE = os.path.join(BASE_DIR, 'client_secrets.json')
#GOOGLE_DRIVE_STORAGE_JSON_KEY_FILE = os.path.join(BASE_DIR, 'client_secrets.json')

#GOOGLE_DRIVE_STORAGE_FOLDER_ID = env('GOOGLE_DRIVE_STORAGE_FOLDER_ID')

# Configuración de Email
EMAIL_BACKEND = config('EMAIL_BACKEND')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=False, cast=bool)
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT',cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')